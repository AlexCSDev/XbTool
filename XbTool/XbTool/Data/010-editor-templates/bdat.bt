//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: Xenoblade BDAT data file
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <byte> ValueType
{
    VT_None = 0,
    UInt8 = 1,
    UInt16 = 2,
    UInt32 = 3,
    Int8 = 4,
    Int16 = 5,
    Int32 = 6,
    String = 7,
    FP32 = 8
};

enum <byte> MemberType
{
    MT_None = 0,
    Scalar = 1,
    Array = 2,
    Flag = 3
};

local int i;

typedef struct(int size) {
    uchar Data[size];
} TextEntry;

typedef struct {
    MemberType Type;
    ValueType ValType;
    ushort MemberOffset;
    if(Type == Array)
    {
        ushort ArrayLength;
    }
} BdatMemberDesc;

typedef struct(int base) {
    SetBackColor(cLtRed);
    short MemberDescOffset;
    short NextHashCollisionOffset;
    short NameOffset;

    SetBackColor(cAqua);
    local int end = FTell();
    FSeek(base + NameOffset);
    string Name;

    SetBackColor(cLtPurple);
    FSeek(base + MemberDescOffset);
    BdatMemberDesc Description;

    FSeek(end);
} BdatMember <read=BdatMemberRead>;

string BdatMemberRead( BdatMember &m )
{
    string s;   
    SPrintf( s, "%-6s %-6s %s", EnumToString(m.Description.Type), EnumToString(m.Description.ValType), m.Name);
    return s;
}

typedef struct(int size){
    if(size > 0) {
        uchar Data[size];
    }
} BdatId;

typedef struct {
    local int base = FTell();
    local int i;
    SetBackColor(cAqua);
    char ID[4];
    uint16 Flags;
    uint16 NamesOffset;
    uint16 ItemSize;
    uint16 HashTableOffset;
    uint16 HashTableLength;
    uint16 ItemTableOffset;
    uint16 ItemCount;
    uint16 BaseId;
    uint16 field_14;
    uint16 Checksum;
    uint32 StringsOffset;
    uint32 StringsLength;
    uint16 MemberTableOffset;
    uint16 MemberCount;

    FSeek(base + HashTableOffset);
    SetBackColor(cGray);
    uint16 HashLookupTable[HashTableLength];

    FSeek(base + MemberTableOffset);
    SetBackColor(cLtRed);

    if(MemberCount > 0) {
        BdatMember Members(base)[MemberCount] <optimize=false>;
    }

    SetBackColor(cSilver);
    FSeek(base + ItemTableOffset);
    if(ItemSize > 0) {
        BdatId Ids(ItemSize)[ItemCount] <optimize=false>;
    }
} BdatFile;

int32 FileCount;
int32 ArchiveSize;
int32 FileOffsets[FileCount];

for(i = 0; i < FileCount; i++) {
    FSeek(FileOffsets[i]);    
    BdatFile File;    
}
